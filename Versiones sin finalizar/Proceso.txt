1.- Agregar la variable keep islands para conseguir desde el panel
keep_islands = UVRandomTranslateProps.keepIslands

2.- Agregar nuevo list en el que se indexen las caras seleccionadas
selected_uv_faces_before_applying_operator = GetSelectedUVFaces_InEditMode(bm, uv_layer)
selected_uv_faces = selected_uv_faces_before_applying_operator

3.- Donde arranque la funcionalidad armar el if-else con el keep_islands

4.- Ejemplo de funcionalidad con el RandomTranslateSelected
	for face in bm.faces:
                if facenumber in selected_uv_faces:
                    # Primero des-selecciona todo
                    bpy.ops.uv.select_all(action='DESELECT')

                    # Selecciona la cara en la que est√° el iterador
                    for vert in face.loops:
                        vert[uv_layer].select = True

                    # Selecciona el resto de la Island
                    bpy.ops.uv.select_linked()

                    # Define los valores aleatorios
                    x_rand = random.uniform(x_min, x_max)
                    y_rand = random.uniform(y_min, y_max)
                    
                    # Mueve la Island
                    bpy.ops.transform.translate(value=(x_rand, y_rand, 0), orient_axis_ortho='X', orient_type='GLOBAL', orient_matrix=((1, 0, 0), (0, 1, 0), (0, 0, 1)), orient_matrix_type='GLOBAL', mirror=False, use_proportional_edit=False, proportional_edit_falloff='SMOOTH', proportional_size=1, use_proportional_connected=False, use_proportional_projected=False)

                    # Quita las caras duplicadas del selected_uv_faces
                    temp_selected_uv_faces = GetSelectedUVFaces_InEditMode(bm, uv_layer)
                    selected_uv_faces = CompareListsAndRemoveElements(selected_uv_faces, temp_selected_uv_faces)

                facenumber += 1
